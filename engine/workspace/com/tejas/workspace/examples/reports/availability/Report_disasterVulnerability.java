/*******************************************************************************
 * Copyright (c) 2013-2014 Pablo Pavon-Marino, Jose-Luis Izquierdo-Zaragoza.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v3
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl.html
 *
 * Contributors:
 *     Pablo Pavon-Marino, Jose-Luis Izquierdo-Zaragoza - initial API and implementation
 ******************************************************************************/

package com.tejas.workspace.examples.reports.availability;

import com.tejas.engine.utils.Triple;
import com.tejas.engine.interfaces.networkDesign.Net2PlanException;
import com.tejas.engine.interfaces.networkDesign.NetPlan;
import com.tejas.engine.libraries.SRGUtils;
import com.tejas.engine.utils.*;

import java.net.URL;
import java.util.*;

/**
 * This report analyzes a network design in terms of average traffic survivability
 * under a set of disaster failures.
 *
 * @author Pablo Pavon-Marino, Jose-Luis Izquierdo-Zaragoza
 * @version 1.0, March 2013
 */
public class Report_disasterVulnerability extends Report_availability
{
    @Override
    public String getDescription()
    {
	return "This report analyzes a network design in terms of average traffic survivability under a set of disaster failures";
    }

    @Override
    public String getTitle()
    {
	return "Disaster-vulnerability report";
    }

    @Override
    public List<Triple<String, String, String>> getParameters()
    {
        List<Triple<String, String, String>> reportParameters = super.getParameters();
        
        Iterator<Triple<String, String, String>> it = reportParameters.iterator();
        
        String paramToRemove = "analyzeDoubleFailures";
        while(it.hasNext())
            if (it.next().getFirst().equals(paramToRemove))
                it.remove();

	return reportParameters;
    }

    @Override
    public String executeReport(NetPlan netPlan, Map<String, String> reportParameters, Map<String, String> net2planParameters)
    {
        reportParameters.put("analyzeDoubleFailures", "false");
        
        return super.executeReport(netPlan, reportParameters, net2planParameters);
    }
    
    @Override
    protected List<Set<Integer>> defineFailureStates(int numSRGs, boolean analyzeDoubleFailures)
    {
        return SRGUtils.enumerateFailureStates(numSRGs, false, false);
    }

    @Override
    protected double[] defineStateProbabilities(List<Set<Integer>> F_s, double[] A_f)
    {
        if (F_s.isEmpty()) throw new Net2PlanException("No failure states");
        
        int S = F_s.size();
        double[] pi_s = new double[S];
        Arrays.fill(pi_s, 1.0 / S);
        
        return pi_s;
    }
    
    @Override
    protected URL getReportTemplateFile()
    {
        try { return getClass().getResource("/com/net2plan/examples/reports/availability/main_disaster.html").toURI().toURL(); }
        catch(Throwable ex) { throw new RuntimeException(ex); }
    }
}